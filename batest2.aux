function r = batest2
r.pass = 0
r.fail = 0
r.errpass = 0
try
	printf("Indexed end tests............\n")
	msg = "a=[4 3 8 9 3 -1]", printf("%s\n",msg), msg.eval
	msg = "res=a(end)", msg.eval
	r = test_check(r, res, -1, msg)	
	msg = "res=a(1:2:end)", msg.eval
	r = test_check(r, res, [4 8 3], msg)	
	msg = "res=a([end/2 end-1 end])", msg.eval
	r = test_check(r, res, [8 3 -1], msg)
	msg = "a=[4 3 9; 33 7 5; 1 -2 0; 13 -1 8]", printf("%s\n",msg), msg.eval
	msg = "res=a(end/2,end-1)", msg.eval
	r = test_check(r, res, 7, msg)
	msg = "x=[noise(2000); noise(1000)]", printf("%s\n",msg), msg.eval
	msg = "y=x(0~end/2), res=[y.left.dur y.right.dur]", msg.eval
	r = test_check(r, res, [1000 500], msg)
	msg = "x=noise(480)@-10++noise(480)@-20", printf("%s\n",msg), msg.eval
	msg = "x(end/2~end).rms", msg.eval
	b=(x(end/2~end).rms+20).abs < 1.e-4
	r = test_check_cond(r, b, msg)	
	printf("Compound Operators tests............\n")
	msg = "a=[4 3 8 9 3 -1]", printf("%s\n",msg), msg.eval
	suma=a.sum
	msg = "a+=1", msg.eval
	r = test_check(r, a.sum, suma+a.length, msg)	
	msg = "a([2 4])+=1", msg.eval
	r = test_check(r, a, [5 5 9 11 4 0], msg)	
	msg = "a([2 end])+=1", msg.eval
	r = test_check(r, a, [5 6 9 11 4 1], msg)
	msg = "j=$i", msg.eval
	r = test_check(r, j*j, -1, msg)	

	printf("Conditional indexing tests............\n")
	msg = "a=[4 3 9; 33 7 5; 1 -2 0; 13 -1 8], av=a(:)", printf("%s\n",msg), msg.eval
	msg = "bv=av(av>5)", msg.eval
	r = test_check(r, bv.length, 5, msg)	
	msg = "av(av<0)*=-1", msg.eval
	r = test_check(r, av.min, 0, msg)	
	msg = "a=(1:10).sqrt, id=1:a.length", printf("%s\n",msg), msg.eval	
	msg = "a(id%2==0)+=100", msg.eval
	r = test_check(r, a(4), 102, msg)
	msg ="x=tone(1000,2); y=x(x>0);", printf("%s\n",msg), msg.eval
	b=y.min >= 0
	r = test_check_cond(r, b, msg)
	printf("\n")
	
catchback me
	msg0 = "PERR"
	printf("%s: %s, %s\n", msg0, msg, me.body)
	r.errpass += 1
end

function out52 = udf_ret_one_arg
out52 = 1
function [out1,out2] = udf_ret_two_arg
out1 = "bj"
out2 = 1==1


function r1 = test_check(r1,a1,a2,msg)
if (issame(a1,a2))
	r1.pass += 1
	msg0 = "PASS"
else
	r1.fail += 1
	msg0 = "FAIL"
end
printf("%s: %s\n", msg0, msg)


function r = test_check_cond(r,a,msg)
if a
	r.pass += 1
	msg0 = "PASS"
else
	r.fail += 1
	msg0 = "FAIL"
end
printf("%s: %s\n", msg0, msg)
